- README.Text
Online Java Quiz System 

Project Overview

The Online Java Quiz System is a comprehensive web application designed to facilitate Java quizzes for students while providing administrators with robust tools to manage quizzes, users, and results. The application is structured to be scalable, user-friendly, and secure, ensuring seamless functionality for both students and administrators.

Key Features:

Admin Dashboard: Secure access for administrators to manage quiz questions, view results, and perform administrative tasks.

Student Interface: User-friendly login for students to take quizzes, view questions dynamically, and submit their answers.

Timer Functionality: An integrated countdown timer displays the remaining time during the quiz.

Result Computation: Automated score calculation upon submission, along with detailed result displays.

Database Integration: Leveraging MySQL database for reliable storage and management of questions, results, and user data.

Error Handling & Validation: Enhanced error management for login failures, input validation, and a seamless user experience.

This project integrates advanced Web Development, Database Management, and Frontend-Backend Interaction capabilities, making it a valuable tool for both educational and administrative purposes.

Folder Structure

The project is organized to separate key components for efficient management and scalability.

Project Directory Layout

Online-Java-Quiz-System/
├── serverfiles/
│   ├── jgradfiles/
│   │   ├── *.jsp                     # All JSP files
│   │   ├── build.gradle              # Gradle build script
│   │   └── settings.gradle           # Gradle settings script
│   ├── xml&propertiesfiles/
│   │   ├── web.xml                   # Web application descriptor
│   │   ├── db.properties             # Database configuration
│   │   └── logback.xml               # Logging configuration
│   ├── src/
│       ├── main/
│       │   ├── java/
│       │   │   └── com.example/
│       │   │       ├── LoginServlet.java      # Login servlet
│       │   │       ├── RegistrationServlet.java  # Registration servlet
│       │   │       ├── ProfileServlet.java    # Profile servlet
│       │   │       ├── DashboardServlet.java  # Admin dashboard servlet
│       │   │       └── LogoutServlet.java     # Logout servlet
│       │   ├── resources/
│       │   │   └── static/                  # Static files (CSS, JS, images)
│       │   └── webapp/
│       │       └── index.jsp               # Main JSP file
│   ├── database/
│       └── online_quiz_system.sql          # SQL schema and initial data
├── pom.xml                                  # Maven build configuration
└── README.txt                               # Project documentation

Database Schema

The system uses a MySQL database to store all application data:

CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(100) NOT NULL,
    role ENUM('admin', 'student') NOT NULL
);

CREATE TABLE quiz_questions (
    question_id INT AUTO_INCREMENT PRIMARY KEY,
    question TEXT NOT NULL,
    option_1 VARCHAR(255) NOT NULL,
    option_2 VARCHAR(255) NOT NULL,
    option_3 VARCHAR(255) NOT NULL,
    option_4 VARCHAR(255) NOT NULL,
    correct_answer VARCHAR(255) NOT NULL
);

CREATE TABLE quiz_results (
    result_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT NOT NULL,
    correct_answers INT NOT NULL,
    total_questions INT NOT NULL,
    time_taken BIGINT NOT NULL,
    FOREIGN KEY (student_id) REFERENCES users(user_id)
);

Setup Instructions

Database Setup:

Install MySQL and create a new database named online_quiz_system.

Import the schema provided in online_quiz_system.sql.

Project Configuration:

Update db.properties with your database credentials:

db.url=jdbc:mysql://localhost:3306/online_quiz_system
db.username=root
db.password=password

Running the Application:

Compile the project using Maven or Gradle.

Deploy the application to a servlet container like Tomcat.

Access the application via http://localhost:8080/online-java-quiz-system.

Setting Up the Project

Prerequisites:

Ensure that Java 8+, MySQL, Maven or Gradle, and Tomcat are installed on your system.

Steps to Set Up:

Clone the repository:

git clone https://github.com/your-repo/Online-Java-Quiz-System.git

Navigate to the project directory:

cd Online-Java-Quiz-System

Open the project in your favorite IDE (e.g., IntelliJ IDEA, Eclipse).

Configure the db.properties file with your MySQL credentials as mentioned above.

Build the project using Maven or Gradle:

# For Maven
mvn clean install

# For Gradle
gradle build

Deploy the built WAR file to your Tomcat server.

Start the Tomcat server and visit the application at http://localhost:8080/online-java-quiz-system.

Dependencies

Project Dependencies:

JSP and Servlets: For dynamic web content.

MySQL Connector/J: For database interaction.

Logback: For logging functionality.

Add the required dependencies to your pom.xml (Maven) or build.gradle (Gradle):

Maven:

<dependencies>
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>8.0.31</version>
    </dependency>
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.3.0</version>
    </dependency>
</dependencies>

Gradle:

dependencies {
    implementation 'mysql:mysql-connector-java:8.0.31'
    implementation 'ch.qos.logback:logback-classic:1.3.0'
}

Why This Project Stands Out:

Scalability: Designed to scale for institutional or online learning platforms.

Advanced Features: Includes dynamic question display, timer, and real-time result computation.

Database Integration: Efficient management of user data, quiz questions, and results.

User-Friendliness: Intuitive design for both students and admins.

Security Considerations: Future implementation of password hashing and encryption for enhanced security.

This document serves as a comprehensive guide for developers and users to understand, set up, and operate the Online Java Quiz System efficiently.